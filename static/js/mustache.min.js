/*
  Shameless port of http://github.com/defunkt/mustache
  by Jan Lehnardt <jan@apache.org>,
     Alexander Lang <alex@upstream-berlin.com>,
     Sebastian Cohnen <sebastian.cohnen@googlemail.com>

  Thanks @defunkt for the awesome code.

  See http://github.com/defunkt/mustache for more info.
*/
/*
 * Mustache.js - 0.2.3
 * Compressed by shrinksafe (http://shrinksafe.dojotoolkit.org/)
 */

var Mustache=function(){
var _1=function(){
};
_1.prototype={otag:"{{",ctag:"}}",pragmas:{},buffer:[],pragmas_implemented:{"IMPLICIT-ITERATOR":true},render:function(_2,_3,_4,_5){
if(_2.indexOf(this.otag)==-1){
if(_5){
return _2;
}else{
this.send(_2);
return;
}
}
if(!_5){
this.buffer=[];
}
_2=this.render_pragmas(_2);
var _6=this.render_section(_2,_3,_4);
if(_5){
return this.render_tags(_6,_3,_4,_5);
}
this.render_tags(_6,_3,_4,_5);
},send:function(_7){
if(_7!=""){
this.buffer.push(_7);
}
},render_pragmas:function(_8){
if(_8.indexOf(this.otag+"%")==-1){
return _8;
}
var _9=this;
var _a=new RegExp(this.otag+"%([\\w_-]+) ?([\\w]+=[\\w]+)?"+this.ctag);
return _8.replace(_a,function(_b,_c,_d){
if(!_9.pragmas_implemented[_c]){
throw ({message:"This implementation of mustache doesn't understand the '"+_c+"' pragma"});
}
_9.pragmas[_c]={};
if(_d){
var _e=_d.split("=");
_9.pragmas[_c][_e[0]]=_e[1];
}
return "";
});
},render_partial:function(_f,_10,_11){
if(!_11||!_11[_f]){
throw ({message:"unknown_partial '"+_f+"'"});
}
if(typeof (_10[_f])!="object"){
return _11[_f];
}
return this.render(_11[_f],_10[_f],_11,true);
},render_section:function(_12,_13,_14){
if(_12.indexOf(this.otag+"#")==-1){
return _12;
}
var _15=this;
var _16=new RegExp(this.otag+"\\#(.+)"+this.ctag+"\\s*([\\s\\S]+?)"+this.otag+"\\/\\1"+this.ctag+"\\s*","mg");
return _12.replace(_16,function(_17,_18,_19){
var _1a=_15.find(_18,_13);
if(_15.is_array(_1a)){
return _15.map(_1a,function(row){
return _15.render(_19,_15.merge(_13,_15.create_context(row)),_14,true);
}).join("");
}else{
if(_1a){
return _15.render(_19,_13,_14,true);
}else{
return "";
}
}
});
},render_tags:function(_1b,_1c,_1d,_1e){
var _1f=this;
var _20=function(){
return new RegExp(_1f.otag+"(=|!|>|\\{|%)?([^/#]+?)\\1?"+_1f.ctag+"+","g");
};
var _21=_20();
var _22=_1b.split("\n");
for(var i=0;i<_22.length;i++){
_22[i]=_22[i].replace(_21,function(_23,_24,_25){
switch(_24){
case "!":
return _23;
case "=":
_1f.set_delimiters(_25);
_21=_20();
return "";
case ">":
return _1f.render_partial(_25,_1c,_1d);
case "{":
return _1f.find(_25,_1c);
default:
return _1f.escape(_1f.find(_25,_1c));
}
},this);
if(!_1e){
this.send(_22[i]);
}
}
if(_1e){
return _22.join("\n");
}
},set_delimiters:function(_26){
var _27=_26.split(" ");
this.otag=this.escape_regex(_27[0]);
this.ctag=this.escape_regex(_27[1]);
},escape_regex:function(_28){
if(!arguments.callee.sRE){
var _29=["/",".","*","+","?","|","(",")","[","]","{","}","\\"];
arguments.callee.sRE=new RegExp("(\\"+_29.join("|\\")+")","g");
}
return _28.replace(arguments.callee.sRE,"\\$1");
},find:function(_2a,_2b){
_2a=this.trim(_2a);
if(typeof _2b[_2a]==="function"){
return _2b[_2a].apply(_2b);
}
if(_2b[_2a]!==undefined){
return _2b[_2a];
}
return "";
},escape:function(s){
return ((s==null)?"":s).toString().replace(/[&"<>\\]/g,function(s){
switch(s){
case "&":
return "&amp;";
case "\\":
return "\\\\";
case "\"":
return "\"";
case "<":
return "&lt;";
case ">":
return "&gt;";
default:
return s;
}
});
},merge:function(a,b){
var _2c={};
for(var _2d in a){
if(a.hasOwnProperty(_2d)){
_2c[_2d]=a[_2d];
}
}
for(var _2d in b){
if(b.hasOwnProperty(_2d)){
_2c[_2d]=b[_2d];
}
}
return _2c;
},create_context:function(_2e){
if(this.is_object(_2e)){
return _2e;
}else{
if(this.pragmas["IMPLICIT-ITERATOR"]){
var _2f=this.pragmas["IMPLICIT-ITERATOR"].iterator||".";
var ctx={};
ctx[_2f]=_2e;
return ctx;
}
}
},is_object:function(a){
return a&&typeof a=="object";
},is_array:function(a){
return Object.prototype.toString.call(a)==="[object Array]";
},trim:function(s){
return s.replace(/^\s*|\s*$/g,"");
},map:function(_30,fn){
if(typeof _30.map=="function"){
return _30.map(fn);
}else{
var r=[];
var l=_30.length;
for(var i=0;i<l;i++){
r.push(fn(_30[i]));
}
return r;
}
}};
return ({name:"mustache.js",version:"0.2.3",to_html:function(_31,_32,_33,_34){
var _35=new _1();
if(_34){
_35.send=_34;
}
_35.render(_31,_32,_33);
if(!_34){
return _35.buffer.join("\n");
}
}});
}();